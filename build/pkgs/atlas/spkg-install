#!/usr/bin/env python

######################################################################
#  Distributed under the terms of the GNU General Public License (GPL)
#                  http://www.gnu.org/licenses/
######################################################################

######################################################################
# makefile compatibility kludge
######################################################################

import os, sys
arg = ""
try:
  arg = sys.argv[1]
except IndexError:
  pass

if arg=="check":
  sys.exit(os.system("./spkg-check"))

######################################################################
### Import stuff
######################################################################

import os, sys, shutil, time, glob
from configuration import conf, cp, ln, which, try_run, edit_in_place

######################################################################
### The following variables may need to be updated if you
### update ATLAS or LAPACK to a newer version
######################################################################

PATCH_DIR = os.path.join(conf['SPKG_DIR'], 'patches')
print "PATCH_DIR", PATCH_DIR

# the current lapack source tarball
LAPACK_TARFILE = os.path.join(os.environ['SAGE_ROOT'], 'upstream', 'lapack-3.4.2.tar')

# but it could also be here...
try:
    with open(LAPACK_TARFILE): pass
except IOError:
    LAPACK_TARFILE = os.path.join(os.environ['abs_top_srcdir'], 'upstream', 'lapack-3.4.2.tar')

# temporary directory to build everything in
BUILD_DIR = os.path.join(conf['SPKG_DIR'], 'ATLAS-build')
BUILD_LIB_DIR = os.path.join(conf['SPKG_DIR'], 'ATLAS-lib')

# constants from src/CONFIG/include/atlconf.h
# Note: must be lists, not tuples, for Python-2.4 support
ATLAS_OSTYPE = (  # static char *osnam
    'UNKNOWN', 'Linux', 'SunOS', 'SunOS4', 'OSF1',
    'IRIX', 'AIX', 'Win9x', 'WinNT', 'Win64',
    'HPUX', 'FreeBSD', 'OSX')
ATLAS_MACHTYPE = (  # static char *machnam
    'UNKNOWN', 'POWER3', 'POWER4', 'POWER5', 'PPCG4', 'PPCG5',
    'POWER6', 'POWER7', 'IBMz9', 'IBMz10', 'IBMz196',
    'x86x87', 'x86SSE1', 'x86SSE2', 'x86SSE3',
    'P5', 'P5MMX', 'PPRO', 'PII', 'PIII', 'PM', 'CoreSolo',
    'CoreDuo', 'Core2Solo', 'Core2', 'Corei1', 'Corei2', 'Atom', 'P4', 'P4E',
    'Efficeon', 'K7', 'HAMMER', 'AMD64K10h', 'AMDDOZER', 'UNKNOWNx86',
    'IA64Itan', 'IA64Itan2',
    'USI', 'USII', 'USIII', 'USIV', 'UST2', 'UnknownUS',
    'MIPSR1xK', 'MIPSICE9', 'ARMv7')

ATLAS_ISAEXT = (  # static char *ISAXNAM
    'None', 'VSX', 'AltiVec', 'AVXMAC', 'AVXFMA4', 'AVX', 'SSE3', 'SSE2', 'SSE1',
    '3DNow', 'NEON' )

# we need to disable parallel builds
os.environ['MAKE'] += ' -j1'
MAKE = os.environ['MAKE']


######################################################################
### Some auxiliary functions to facilitate IO and error checking
######################################################################

# Run shell command "command", but flush stdout and stderr before doing
# this. Also echo commands which are executed.
def system_with_flush(command):
    print 'Running', command
    sys.stdout.flush()
    sys.stderr.flush()
    import subprocess
    return subprocess.call(command, shell=True)

def assert_success(rc, good=None, bad=None):
    if rc == 0:
        if good is not None:
            print good
        return
    print '-'*60
    import traceback
    traceback.print_stack(file=sys.stdout)
    print '-'*60
    if bad is not None:
        print 'Error: ', bad
    sys.exit(rc)


######################################################################
### Skip building ATLAS on specific systems
######################################################################

# On Cygwin we simply require that the system-wide lapack is installed.
# This includes BLAS and LAPACK and is enough to build the rest of Sage.
if conf['CYGWIN?'] and not os.environ.has_key('SAGE_ATLAS_ARCH'):
    libraries = ['/usr/lib/libblas.dll.a', '/usr/lib/liblapack.dll.a']
    for lib in libraries:
        if not os.path.exists(lib):
            print '*'*75
            print 'Could not locate required file: "' + lib + '".'
            print 'On Cygwin you must install the following standard LAPACK Cygwin packages'
            print 'via the Cygwin setup.exe program in the "Math" category:'
            print '* lapack,'
            print '* liblapack-devel.'
            print 'Alternatively you can try building your own ATLAS by setting'
            print 'SAGE_ATLAS_ARCH to something sensible although that is not'
            print 'officially supported.'
            print '*'*75
            sys.exit(1)
    for lib in libraries:
        cp(lib, os.path.join(conf['SAGE_LOCAL'], 'lib'))
    sys.exit(0)


if conf['Darwin?'] and not os.environ.has_key('SAGE_ATLAS_ARCH'):
    print 'Skipping build of ATLAS on OS X, using system library instead.'
    print 'You can try building your own ATLAS by setting SAGE_ATLAS_ARCH'
    print 'to something sensible although that is not officially supported.'
    if conf['PPC?']:   # OSX 10.4 PPC linker needs help to find the accelerate blas
        veclib_dir = '/System/Library/Frameworks/Accelerate.framework/' + \
            'Versions/A/Frameworks/vecLib.framework/Versions/A'
        for lib in [ 'libBLAS.dylib', 'libLAPACK.dylib']:
            ln(os.path.join(veclib_dir, lib),
               os.path.join(conf['SAGE_LOCAL'], 'lib', lib))
    sys.exit(0)


######################################################################
### Use SAGE_ATLAS_LIB='directory' if provided
######################################################################

if os.environ.has_key('SAGE_ATLAS_LIB'):
    ATLAS_LIB = os.environ['SAGE_ATLAS_LIB']
    libraries = ['libatlas', 'liblapack', 'libcblas', 'libf77blas']
    libraries_optional = ['libptcblas', 'libptf77blas']

    def is_atlas_lib_path(path):
        if path is None:
            return False
        if not os.path.isdir(path):
            return False
        filenames = os.listdir(path)
        for lib in libraries:
            if not any(fname.startswith(lib) for fname in filenames):
                print 'Cannot find '+lib+'.* in '+path
                return False
        return True

    paths = [ ATLAS_LIB, os.path.join(ATLAS_LIB, 'lib64'), os.path.join(ATLAS_LIB, 'lib') ]
    ATLAS_LIB = None
    for path in paths:
        if is_atlas_lib_path(path):
            ATLAS_LIB = path
            break

    if ATLAS_LIB is None:
        print 'Unable to find one of liblapack, libcblas, libatlas or libf77blas'
        print 'in the directory', ATLAS_LIB
        print 'Set SAGE_ATLAS_LIB to the directory containing liblapack, libcblas,'
        print 'libatlas and libf77blas (either .a, .so, .dylib extensions) if'
        print 'you wish to use existing ATLAS libraries. For more details, see'
        print 'http://sagemath.org/doc/installation/source.html#environment-variables'
        print 'Unset SAGE_ATLAS_LIB to build ATLAS from source.'
        print 'Then type make.'
        sys.exit(2)

    symbol_table = try_run('readelf -s ' + os.path.join(ATLAS_LIB, 'libf77blas.so'))
    if not symbol_table is None:
        sym_gfortran = 'gfortran' in symbol_table
        sym_g95 = 'g95' in symbol_table
        if sym_gfortran and conf['fortran'] != 'gfortran':
            print "Symbols in lib77blas indicate it was build with gfortran \n"
            print "However SAGE is using a different fortran compiler \n"
            print "If you wish to use this blas library, make sure SAGE_FORTRAN points \n"
            print "to a fortran compiler compatible with this library. \n"
            sys.exit(2)
        if sym_g95 and conf['fortran'] != 'g95':
            print "Symbols in lib77blas indicate it was build with g95 \n"
            print "However SAGE is using a different fortran compiler \n"
            print "If you wish to use this blas library, make sure SAGE_FORTRAN points \n"
            print "to a fortran compiler compatible with this library. \n"
            sys.exit(2)

    SAGE_LOCAL_LIB = os.path.join(conf['SAGE_LOCAL'], 'lib')
    def symlinkOSlibrary(library_basename):
        filenames = [ fname for fname in os.listdir(path)
                      if fname.startswith(library_basename) ]
        for fname in filenames:
            source = os.path.join(ATLAS_LIB, fname)
            destination = os.path.join(SAGE_LOCAL_LIB, fname)
            print 'Symlinking '+source+' -> '+destination
            try:
                os.remove(destination)
            except OSError:
                pass
            try:
                os.symlink(source, destination)
            except OSError:
                pass
    for lib in libraries + libraries_optional:
        symlinkOSlibrary(lib)
    sys.exit(0)


######################################################################
### Patch source
######################################################################

# apply all patches
system_with_flush('( echo "include spkg.mk" | sage-dist-make - patch-stamp SRC=src/ATLAS ) || exit $?')

# patches/Makefile
# fix for Xcode creating directories like xspew.dSYM

# patches/archinfo_linux.c
# add PPC4 7447 CPU and better Itanium2 detection:

# patches/archinfo_x86.c
# add Core2Duo and Dunnington CPUid

# patches/probe_comp.c
# work around "-m64" cflag issue on Itanium

# add extra architectural defaults
# currently IA64Itan264 and x86SSE264SSE2
cp('patches/ARCHS/*.tar.bz2', 'src/CONFIG/ARCHS')

# hardcoded gcc in SpewMakeInc.c
edit_in_place('src/ATLAS/CONFIG/src/SpewMakeInc.c') \
    .replace('   goodgcc = .*', '   goodgcc = "' + os.environ['CC'] + '";') \
    .close()


# override throttling check if architecture is specified
edit_in_place('src/ATLAS/CONFIG/src/config.c') \
    .replace('if \(mach == MACHOther\)', 'if (mach != MACHOther) thrchk=0; else') \
    .close()

if os.path.isdir(BUILD_LIB_DIR):
    # shutil.chmod is a pain. os.system should work fine
    os.system("chmod -R +w " + BUILD_LIB_DIR)
    shutil.rmtree(BUILD_LIB_DIR)
shutil.copytree(os.path.join(PATCH_DIR, 'ATLAS-lib'), BUILD_LIB_DIR)
# shutil.chmod is a pain. os.system should work fine
os.system("chmod -R +w " + BUILD_LIB_DIR)


######################################################################
### configure functions
######################################################################

def configure_options_from_environment():
    # Figure out architecture (see ATLAS_MACHTYPE) and isa extensions (see
    # ATLAS_ISAEXT) from environment variables:
    arch = None
    isa_ext = None
    archdef_dir = None
    if conf['generic_binary?']:
        print 'Sage "fat" binary mode set: Building "base" binary'
        print 'NOTE: This can result in a Sage that is significantly slower at certain numerical'
        print 'linear algebra since full FAT binary support has not been implemented yet.'
        arch, isa_ext, archdef_dir = configure_base()
    elif os.environ.has_key('SAGE_ATLAS_ARCH'):
        opts = os.environ['SAGE_ATLAS_ARCH'].split(',')
        arch = opts[0]
        if arch not in ATLAS_MACHTYPE + ('fast', 'base'):
            print 'SAGE_ATLAS_ARCH architecture must be one of '+ ', '.join(ATLAS_MACHTYPE)
            sys.exit(1)
        if len(opts)>0:
            isa_ext = opts[1:]
        if not all(ext in ATLAS_ISAEXT for ext in isa_ext):
            print 'SAGE_ATLAS_ARCH ISA extension must be one of '+ ', '.join(ATLAS_ISAEXT)
            sys.exit(1)
    return (arch, isa_ext, archdef_dir)


def configure(arch=None, isa_ext=None, archdef_dir=None):
    """
    Configure for ``arch``.

    INPUT:

    - ``arch`` -- ``None`` or one of ``ATLAS_MACHTYPE``

    - ``isa_ext`` -- ``None`` or a sublist of ``ATLAS_ISAEXT``
    """
    if arch is None:
        arch, isa_ext, archdef_dir = configure_options_from_environment()
    if arch=='fast':
        arch, isa_ext, archdef_dir = configure_fast()
    if arch=='generic' or arch=='base':
        arch, isa_ext, archdef_dir = configure_base()

    print 'Running configure with arch = '+str(arch)+ \
        ', isa extensions '+str(isa_ext)+ \
        ', archdef dir '+str(archdef_dir)
    os.chdir(conf['SPKG_DIR'])
    if os.path.isdir(BUILD_DIR):
		  # shutil.chmod is a pain. os.system should work fine
        os.system("chmod -R +w " + BUILD_DIR)
        shutil.rmtree(BUILD_DIR)
    os.mkdir(BUILD_DIR)
    os.chdir(BUILD_DIR)

    # We need to provide full pathes to FC and CC to ATLAS configure script,
    # so that it does not use 'find' and travel around the filesystem to find
    # them.
    # We first split the compiler executable names from potential options, e.g.
    # as in 'gcc -m64', then use 'which' to locate them, and finally add the
    # options back.
    FC = os.environ['FC']
    FCsplit = FC.find(' ')
    if  FCsplit != -1:
        FCbin, FCopt = FC[:FCsplit], FC[FCsplit:]
    else:
        FCbin, FCopt = FC, ''

    CC = os.environ['CC']
    CCsplit = CC.find(' ')
    if  CCsplit != -1:
        CCbin, CCopt = CC[:CCsplit], CC[CCsplit:]
    else:
        CCbin, CCopt = CC, ''

    cmd = '../src/ATLAS/configure'
    cmd += ' --prefix=' + conf['SAGE_LOCAL']
    cmd += ' --with-netlib-lapack-tarfile=' + LAPACK_TARFILE
    cmd += ' --cc="' + CC + '"'

    ## -Si latune 1: enable lapack tuning
    ## typically adds 3-4 hours of install time
    cmd += ' -Si latune 0'

    # -Fa alg -fPIC: set flags so we can build dynamic libraries
    cmd += ' -Fa alg -fPIC'

    ## -t 0: disable threading
    #cmd += ' -t 0'

    # set fortran compiler
    cmd += ' -C if "' + which(FCbin) + FCopt + '"'

    # set C compiler
    cmd += ' -C acg "' + which(CCbin) + CCopt + '"'

    # set bit width
    cmd += ' -b ' + conf['bits'][0:2]

    # set OS type
    try:
        if conf['Darwin?']:
            atlas_osnam = 'OSX'
        elif conf['CYGWIN?']:
            atlas_osnam = 'WinNT'
        else:
            atlas_osnam = conf['system']
        atlas_system = ATLAS_OSTYPE.index(atlas_osnam)
        cmd += ' -O '+str(atlas_system)
    except ValueError:
        pass

    # set machine architecture
    if arch is not None:
        cmd += ' -A '+str(ATLAS_MACHTYPE.index(arch))

    # set cpu instruction set extensions
    if isa_ext is not None:
        isa_extension = sum(1 << ATLAS_ISAEXT.index(x) for x in isa_ext)
        cmd += ' -V '+str(isa_extension)

    # use a predefined archdef file in the archdef_dir directory
    if archdef_dir is not None:
        cmd += ' -Ss ADdir '+str(archdef_dir)

    rc = system_with_flush(cmd)
    return rc


def configure_fast():
    if conf['Intel?'] and conf['64bit?']:
        print 'Fast configuration on Intel x86_64 compatible CPUs.'
        arch = 'P4E'
        isa_ext = ('SSE3', 'SSE2', 'SSE1')
        archdef_dir = None
    elif conf['Intel?'] and conf['32bit?']:
        print 'Fast configuration on Intel i386 compatible CPUs.'
        arch = 'x86SSE3'
        isa_ext = ('SSE3', 'SSE2', 'SSE1')
        archdef_dir = None
    elif conf['SPARC?']:
        print 'Fast configuration on SPARC.'
        arch = 'USIV'
        isa_ext = ()
        archdef_dir = None
    elif conf['PPC?']:
        print 'Fast configuration on PPC.'
        arch = 'PPCG5'
        isa_ext = ('AltiVec', )
        archdef_dir = None
    elif conf['IA64?']:
        print 'Fast configuration on Itanium.'
        arch = 'IA64Itan2'
        isa_ext = ()
        archdef_dir = None
    else:
        raise NotImplementedError, 'I don\'t know a "fast" configuration for your cpu.'
    return (arch, isa_ext, archdef_dir)


def configure_base():
    if conf['Intel?'] and conf['64bit?']:
        print 'Generic configuration on Intel x86_64 compatible CPUs.'
        arch = 'x86SSE2'
        isa_ext = ('SSE2', 'SSE1')
        archdef_dir = PATCH_DIR
    elif conf['Intel?'] and conf['32bit?']:
        print 'Generic configuration on Intel i386 compatible CPUs.'
        arch = 'x86x87'
        isa_ext = ('3DNow',)
        archdef_dir = None
    elif conf['SPARC?']:
        print 'Base configuration on SPARC.'
        arch = 'USIII'
        isa_ext = ()
        archdef_dir = None
    elif conf['PPC?']:
        print 'Base configuration on PPC.'
        arch = 'PPCG4'
        isa_ext = ()
        archdef_dir = None
    elif conf['IA64?']:
        print 'Base configuration on Itanium.'
        arch = 'IA64Itan'
        isa_ext = ()
        archdef_dir = None
    else:
        raise NotImplementedError, 'I don\'t know a "base" configuration for your cpu.'
    return (arch, isa_ext, archdef_dir)


######################################################################
### make function
######################################################################

def make_atlas(target=None):
    os.chdir(BUILD_DIR)
    if target is None:
        return system_with_flush(MAKE)
    else:
        return system_with_flush(MAKE + ' ' + target)


######################################################################
### make and save archdef function
######################################################################

def build_and_save_archdef():
    try:
        ARCHDEF_SAVE_DIR = os.environ['SAGE_ATLAS_SAVE_ARCHDEF']
    except KeyError:
        return
    os.chdir(os.path.join(BUILD_DIR, 'ARCHS'))
    rc = system_with_flush(MAKE + ' ArchNew')
    assert_success(rc, bad='Making archdef failed.', good='Finished building archdef.')
    rc = system_with_flush(MAKE + ' tarfile')
    assert_success(rc, bad='Making archdef tarfile failed.', good='Finished building archdef tarfile.')
    for tarfile in glob.glob('*.tar.bz2'):
        cp(tarfile, ARCHDEF_SAVE_DIR)


######################################################################
### static libraries functions
######################################################################

def build(arch=None, isa_ext=None, archdef_dir=None):
    """
    Configure/build with given architectural information.

    Return ``0`` if successfull.
    """
    rc = configure(arch, isa_ext, archdef_dir)
    assert_success(rc, bad='Configure failed.', good='Finished configuring ATLAS.')
    return make_atlas()

def build_tuning():
    """
    Configure/build by going through the full tuning process.

    Return ``0`` if successfull.
    """
    rc = configure()
    if rc!=0:
        print 'Configure failed, possibly because you have CPU throttling enabled.'
        print 'Skipping tuning attempts.'
        return rc
    print 'First attempt: automatic tuning.'
    rc = make_atlas()
    if rc==0:
        return rc
    print 'ATLAS failed to build, possibly because of throttling or a loaded system.'
    print 'Waiting 1 minute...'
    sys.stdout.flush()
    time.sleep(60)
    print 'Second attempt: Re-running make.'
    return make_atlas()


######################################################################
### shared libraries functions
######################################################################

def configure_atlas_library():
    os.chdir(BUILD_LIB_DIR)
    static_library_dir = os.path.join(BUILD_DIR, 'lib')
    for static_lib in glob.glob(os.path.join(static_library_dir, 'lib*.a')):
        shutil.copy(static_lib, BUILD_LIB_DIR)
    # shutil.chmod is a pain. os.system should work fine
    os.system("chmod -R +w " + BUILD_LIB_DIR)
    cmd = './configure'
    cmd += ' --prefix=' + conf['SAGE_LOCAL']
    cmd += ' --libdir=' + os.path.join(conf['SAGE_LOCAL'],'lib')
    cmd += ' --disable-static'
    return system_with_flush(cmd)

def make_atlas_library(target=None):
    os.chdir(BUILD_LIB_DIR)
    cmd = (MAKE + ' ' + target) if target else MAKE
    return system_with_flush(cmd)


######################################################################
### build atlas and lapack static libraries
######################################################################

#
# Workaround for specific platforms: Disable tuning and go straight to
# fast/base architectural defaults
#
skip_tuning = conf['IA64?']    # Itanium is dead and tuning is broken


rc = None
if os.environ.has_key('SAGE_ATLAS_ARCH') or conf['generic_binary?']:
    print 'Building using specific architecture.'
    rc = build()
else:
    print 'Configuring ATLAS.'
    if skip_tuning:
        print 'Skipping tuning attempts (skip_tuning = True).'
        rc = 1    # Fake failed tuning attempts
    else:
        rc = build_tuning()
    if rc!=0:
        print 'Third attempt: use "fast" options.'
        rc = build(arch='fast')
    if rc!=0:
        print 'Fourth attempt: use "base" options.'
        rc = build(arch='base')

assert_success(rc, bad='Failed to build ATLAS.', good='Finished building ATLAS core.')

build_and_save_archdef()


######################################################################
### install atlas and lapack headers
######################################################################

edit_in_place(os.path.join(BUILD_DIR, 'Makefile')) \
    .replace('.*Make.top install_lib.*', '') \
    .close()

rc = make_atlas('install')
assert_success(rc, bad='Failed to install ATLAS headers',
               good='Installed ATLAS headers')


######################################################################
### configure and build atlas and lapack shared libraries
######################################################################

rc = configure_atlas_library()
assert_success(rc, bad='Configuring shared ATLAS library failed.',
               good='Finished configuring shared ATLAS library.')

have_serial_libs = False
have_parallel_libs = False

rc = make_atlas_library()
if rc!=0:
    print 'Failed to build serial+parallel shared libraries, possibly because your'
    print 'system does not support both. Trying to build serial libraries only.'
    rc = make_atlas_library('all_serial')
    assert_success(rc, bad='Failed to build any shared library.',
                   good='Finished building serial shared ATLAS library.')
    have_serial_libs = True
else:
    have_parallel_libs = True


######################################################################
### install shared libraries
######################################################################

if have_parallel_libs:
    rc = make_atlas_library('install')
    assert_success(rc, bad='Installing the parallel+serial shared ATLAS library failed.',
                   good='Finished installing parallel+serial shared ATLAS library.')

if have_serial_libs:
    rc = make_atlas_library('install_serial')
    assert_success(rc, bad='Installing the serial shared ATLAS library failed.',
                   good='Finished installing serial shared ATLAS library.')


######################################################################
### install script to tune and build ATLAS
######################################################################

cp(os.path.join(PATCH_DIR, 'atlas-config'),
   os.path.join(conf['SAGE_LOCAL'], 'bin'))
