diff -ru latest/factory/facFqBivar.cc b/factory/facFqBivar.cc
--- latest/factory/facFqBivar.cc	2012-07-12 16:24:57.000000000 +0200
+++ b/factory/facFqBivar.cc	2013-08-26 14:09:25.479601121 +0200
@@ -403,7 +403,9 @@
                 delete [] v;
                 if (recombination)
                 {
-                  appendTestMapDown (result, buf (y - eval, y), info, source,
+                  buf= buf (y-eval,y);
+                  buf /= Lc (buf);
+                  appendTestMapDown (result, buf, info, source,
                                       dest);
                   F= 1;
                   return result;
@@ -430,7 +432,9 @@
       delete [] v;
       if (recombination)
       {
-        appendTestMapDown (result, buf (y - eval, y), info, source, dest);
+        buf= buf (y-eval,y);
+        buf /= Lc (buf);
+        appendTestMapDown (result, buf, info, source, dest);
         F= 1;
         return result;
       }
@@ -1616,6 +1620,8 @@
     buf= mod (buf, yToL);
     buf /= content (buf, x);
     buf2= buf (y-evaluation, y);
+    buf2 /= Lc (buf2);
+    buf2 /= Lc (buf2);
     if (!k && beta == x)
     {
       if (degree (buf2, alpha) < 1)
@@ -1738,6 +1744,8 @@
     {
       tmp1= tmp1 (y - evaluation, y);
       tmp2= tmp2 (y - evaluation, y);
+      tmp1 /= Lc (tmp1);
+      tmp2 /= Lc (tmp2);
       if (!k && beta == x && degree (tmp2, alpha) < 1 &&
           degree (tmp1, alpha) < 1)
       {
@@ -1792,6 +1800,8 @@
     buf= mod (buf, yToL);
     buf /= content (buf, x);
     buf2= buf (y - evaluation, y);
+    buf2 /= Lc (buf2);
+    buf2 /= Lc (buf2);
     if (!k && beta == x)
     {
       if (degree (buf2, alpha) < 1)
@@ -2650,9 +2660,12 @@
   if (isIrreducible)
   {
     delete [] bounds;
-    CanonicalForm G= F;
+    Variable y= Variable (2);
+    CanonicalForm tmp= F (y - evaluation, y);
+    CFList source, dest;
+    tmp= mapDown (tmp, info, source, dest);
     F= 1;
-    return CFList (G);
+    return CFList (tmp);
   }
 
   CFArray * A= new CFArray [factors.length()];
@@ -4327,11 +4340,11 @@
   else
   {
     i= 1;
-    while ((degree (F,y)/4)*i + 4 <= smallFactorDeg)
+    while ((degree (F,y)/4+1)*i + 4 <= smallFactorDeg)
       i++;
     while (i < 5)
     {
-      dummy= tmin (degree (F,y)+1, (degree (F,y)/4)*i+4);
+      dummy= tmin (degree (F,y)+1, (degree (F,y)/4+1)*i+4);
       if (l < dummy)
       {
         factors.insert (LCF);
@@ -4471,11 +4484,11 @@
   else
   {
     i= 1;
-    while ((degree (F,y)/4)*i + 4 <= smallFactorDeg)
+    while ((degree (F,y)/4+1)*i + 4 <= smallFactorDeg)
       i++;
     while (i < 5)
     {
-      dummy= tmin (degree (F,y)+1, (degree (F,y)/4)*i+4);
+      dummy= tmin (degree (F,y)+1, (degree (F,y)/4+1)*i+4);
       if (l < dummy)
       {
         factors.insert (LCF);
@@ -4619,11 +4632,11 @@
   else
   {
     i= 1;
-    while ((degree (F,y)/4)*i + 4 <= smallFactorDeg)
+    while (((degree (F,y)/4)*i+1) + 4 <= smallFactorDeg)
       i++;
     while (i < 5)
     {
-      dummy= tmin (degree (F,y)+1, (degree (F,y)/4)*i+4);
+      dummy= tmin (degree (F,y)+1, ((degree (F,y)/4)+1)*i+4);
       if (l < dummy)
       {
         factors.insert (LCF);
@@ -5020,12 +5033,12 @@
     CanonicalForm bufF= F;
     int factorsFound= 0;
     if (alpha.level() == 1 || (alpha.level() != 1 && reduceFq2Fp))
-      reconstructionTry (result, bufF, bufUniFactors, degree (F) + 1 + degree
-                         (LCF), factorsFound, factorsFoundIndex, NTLN, false
+      reconstructionTry (result, bufF, bufUniFactors, degree (F) + 1,
+                         factorsFound, factorsFoundIndex, NTLN, false
                         );
     else
-      reconstructionTry (result, bufF, bufUniFactors, degree (F) + 1 + degree
-                         (LCF), factorsFound, factorsFoundIndex, NTLNe, false
+      reconstructionTry (result, bufF, bufUniFactors, degree (F) + 1,
+                         factorsFound, factorsFoundIndex, NTLNe, false
                         );
     if (alpha.level() == 1 || (alpha.level() != 1 && reduceFq2Fp))
     {
@@ -5336,7 +5349,7 @@
   if (minBound > 16 || result.length() == 0)
   {
     result= Union (result, smallFactors);
-    CanonicalForm MODl= power (y, degree (F) + 1 + degree (LC (F, 1)));
+    CanonicalForm MODl= power (y, degree (F) + 1);
     delete [] bounds;
     return Union (result, factorRecombination (bufUniFactors, F, MODl, degs, 1,
                                                bufUniFactors.length()/2
@@ -5585,7 +5598,7 @@
     delete [] bounds;
     return Union (smallFactors, extFactorRecombination
                                 (bufUniFactors, F,
-                                 power (y, degree (F) + 1 + degree (LCF)),info,
+                                 power (y, degree (F) + 1),info,
                                  degs, evaluation, 1, bufUniFactors.length()/2
                                 )
                  );
@@ -5638,8 +5651,8 @@
     CanonicalForm bufF= F;
     int factorsFound= 0;
 
-    extReconstructionTry (result, bufF, bufUniFactors, degree (F) + 1 + degree
-                          (LCF), factorsFound, factorsFoundIndex, NTLN, false,
+    extReconstructionTry (result, bufF, bufUniFactors, degree (F) + 1,
+                          factorsFound, factorsFoundIndex, NTLN, false,
                           info, evaluation
                          );
 
@@ -5767,7 +5780,10 @@
     result= Union (result, smallFactors);
     if (degs.getLength() == 1 || bufUniFactors.length() == 1)
     {
-      result.append (bufF);
+      CFList source, dest;
+      CanonicalForm tmp= bufF (y - evaluation, y);
+      tmp= mapDown (tmp, info, source, dest);
+      result.append (tmp);
       return result;
     }
     return Union (result, extHenselLiftAndLatticeRecombi (bufF, bufUniFactors,
@@ -5834,7 +5850,7 @@
   if (minBound > 16 || result.length() == 0)
   {
     result= Union (result, smallFactors);
-    CanonicalForm MODl= power (y, degree (F) + 1 + degree (LC (F, 1)));
+    CanonicalForm MODl= power (y, degree (F) + 1);
     delete [] bounds;
     return Union (result, extFactorRecombination (bufUniFactors, F, MODl, info,
                                                   degs, evaluation, 1,
@@ -6116,7 +6132,7 @@
       return factors;
     }
 
-    if (i == 0)
+    if (i == 0 && !extension)
     {
       if (subCheck1 > 0)
       {
diff -ru latest/factory/facFqBivarUtil.cc b/factory/facFqBivarUtil.cc
--- latest/factory/facFqBivarUtil.cc	2012-07-12 16:24:57.000000000 +0200
+++ b/factory/facFqBivarUtil.cc	2013-08-26 14:09:38.979597772 +0200
@@ -494,16 +494,21 @@
     //middle product style computation of [G*oldQ]^{l}_{oldL}
     CanonicalForm G3= div (G, xToOldL);
     CanonicalForm Up= mulMod2 (G3, oldQ, xToLOldL);
-    CanonicalForm xToOldL2= power (x, oldL/2);
+    CanonicalForm xToOldL2= power (x, (oldL+1)/2);
     CanonicalForm G2= mod (G, xToOldL);
     CanonicalForm G1= div (G2, xToOldL2);
     CanonicalForm G0= mod (G2, xToOldL2);
     CanonicalForm oldQ1= div (oldQ, xToOldL2);
     CanonicalForm oldQ0= mod (oldQ, xToOldL2);
-    CanonicalForm Mid= mulMod2 (G1, oldQ1, xToLOldL);
+    CanonicalForm Mid;
+    if (oldL % 2 == 1)
+      Mid= mulMod2 (G1, oldQ1*x, xToLOldL);
+    else
+      Mid= mulMod2 (G1, oldQ1, xToLOldL);
     //computation of Low might be faster using a real middle product?
     CanonicalForm Low= mulMod2 (G0, oldQ1, xToOldL)+mulMod2 (G1, oldQ0, xToOldL);
-    Low= div (Low, xToOldL2);
+    Low= div (Low, power (x, oldL/2));
+    Low= mod (Low, xToLOldL);
     Up += Mid + Low;
     bufF= div (F, xToOldL);
     bufF -= Up;
diff -ru latest/factory/facMul.cc b/factory/facMul.cc
--- latest/factory/facMul.cc	2012-07-12 16:24:57.000000000 +0200
+++ b/factory/facMul.cc	2013-08-26 14:09:38.979597772 +0200
@@ -2720,13 +2720,6 @@
     divrem (A, B, Q, R);
     return;
   }
-  if (!(B.level() == 1 && B.isUnivariate()) &&
-      (A.level() == 1 && A.isUnivariate()))
-  {
-    Q= 0;
-    R= A;
-    return;
-  }
 
   Variable x= Variable (1);
   int degB= degree (B, x);
