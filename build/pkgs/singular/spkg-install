#!/usr/bin/env sage-dist-make

###########################################
PACKAGE_NAME=singular
PACKAGE_VERSION=3.1.5.p8
###########################################
THIS_MAKEFILE := $(lastword $(MAKEFILE_LIST))

all: install

# ugly, but works when called like old spkg-install
COMMONMK?=spkg.mk
include $(COMMONMK)

SRC = `pwd`/src/latest
SHARED = `pwd`/src/shared

SINGULAR_CONFIGURE?=
# disable the dynamic kernel, except on Linux
ifneq ($(UNAME), Linux)
    SINGULAR_CONFIGURE+=--without-dynamic-kernel
endif

ifeq ($(UNAME), Darwin)
    export MACOSX_DEPLOYMENT_TARGET=10.4

    # Singular needs $LD set to "libtool", not "ld" on Darwin.
    # If we unset it, Singular will figure it out correctly.
    unset LD
endif

# On SPARC, we need 8-byte alignment for 64-bit integers
ifneq (,$(findstring sparc,`uname -p`))
    SINGULAR_CONFIGURE+=--with-align=8
endif


ifeq ($(SAGE_DEBUG),yes)
    WITH_DEBUG=--with-debug
    ENABLE_DEBUGOUTPUT=--enable-debugoutput

    CFLAGS:="-O0 -g $(CFLAGS)"
    CXXFLAGS:="-O0 -g $(CXXFLAGS)"
else
    WITH_DEBUG=--without-debug
    ENABLE_DEBUGOUTPUT=--disable-debugoutput

    # By default, parts of Singular are compiled with -O2 and parts
    # with -O3.  If we do set any CFLAGS, this always overrides the
    # default CFLAGS set by upstream.  In order to be compatible, we
    # set the optimization to -O2.
    # Increasing the optimization level to -O3 has caused various
    # problems in the past either with specific compilers or on specific
    # platforms.
    OPTIMIZATION_FLAGS=-O2

    CFLAGS:=$(OPTIMIZATION_FLAGS) -g $(CFLAGS)
    CXXFLAGS:=$(OPTIMIZATION_FLAGS) -g $(CXXFLAGS)
endif

ifeq ($(SAGE64),yes)
    CFLAGS+=-m64 "
    CXXFLAGS+=-m64
    CPPFLAG+=-m64
    LDFLAGS+=-m64
    ifeq ($(UNAME),xSunOS)
        CC+=$(CC) -m64
        CXX+=$(CXX) -m64
    endif
endif

CPPFLAGS+=-I$(SAGE_LOCAL)/include

# we are building everything fPIC, this might impose a slight
# performance hit, need to evaluate:

CXXFLAGS += -fPIC
CFLAGS += -fPIC

MYMAKEFLAGS=

# The Sun assembler has problems with -pipe, so disable it.
# This only affects compile time, not the compiled programs/libraries.
ifeq ($(UNAME),SunOS)
    MYMAKEFLAGS+=PIPE=
endif

# Move some patches which are conditionally applied
# ugh. you will have to clean manually if you change SAGE_DEBUG.
# UNAME should be const enough.
patch-stamp: patch-pre-stamp
patch-pre-stamp:
	if [ "$$UNAME" = "CYGWIN" ]; then \
	    patch -dsrc -p1 < $</conditional/cygwin.patch; \
	    echo conditional/cygwin.patch >> applied; \
	fi
	if [ "$$SAGE_DEBUG" = "yes" ]; then \
	    mv patches/conditional/sage_debug.patch . || return $?; \
	    # Remove old omalloc files, except for configure; \
	    mv src/omalloc/configure configure_omalloc; \
	    rm -r src/omalloc/*; \
	    mv configure_omalloc src/omalloc/configure; \
	    patch -dsrc -p1 < patches/conditional/singular_xalloc.patch; \
	    echo conditional/singular_xalloc.patch >> applied; \
	fi
	touch $@

# unnecessary once uninstall works
clean-hack:
	rm -f $(SAGE_LOCAL)/bin/Singular*
	rm -f $(SAGE_LOCAL)/include/factory.h
	rm -f $(SAGE_LOCAL)/include/factoryconf.h
	rm -rf $(SAGE_LOCAL)/include/singular

# configure notes:
# 1) We really need to add --exec-prefix and --bindir as Singular
#    uses some wierd defaults.
# 2) configure calls other configure scripts (for example
#    omalloc/configure).  Not all of these configure scripts
#    support all options given here, leading to warnings which
#    may be ignored.
# 3) --without-debug doesn't work:
#    http://www.singular.uni-kl.de:8002/trac/ticket/438
#    Replace --with-debug by $WITH_DEBUG if this is fixed.
#
configure: configure-stamp
	@echo dont expect anything to be configured now.
	@echo see install target for the workaround

configure-stamp: patch-stamp
	export CFLAGS="$(CFLAGS)" \
	       CXXFLAGS="$(CXXFLAGS)" \
	       GREP_OPTIONS=""; \
	cd $(SRC); ./configure \
	            --prefix="$(SAGE_LOCAL)" \
	            --exec-prefix="$(SAGE_LOCAL)" \
	            --bindir="$(SAGE_LOCAL)"/bin \
	            --libdir="$(SAGE_LOCAL)"/lib \
	            --with-apint=gmp \
	            --with-malloc=system \
	            --with-NTL \
	            --without-MP \
	            --without-lex \
	            --without-Boost \
	            --without-flint \
	            --enable-Singular \
	            --enable-libfac \
	            --enable-factory \
	            --with-factory=../factory \
	            --enable-IntegerProgramming \
	            --disable-doc \
	            $(SINGULAR_CONFIGURE) \
	            --with-debug

# configure factory
	export CFLAGS="$(CFLAGS)" \
	       CXXFLAGS="$(CXXFLAGS)" \
	       GREP_OPTIONS=""; \
	cd $(SRC)/factory; ./configure \
	            --prefix="$(SAGE_LOCAL)" \
	            --includedir="$(SAGE_LOCAL)/include/factory" \
	            --exec-prefix="$(SAGE_LOCAL)" \
	            --bindir="$(SAGE_LOCAL)"/bin \
	            --libdir="$(SAGE_LOCAL)"/lib \
	            --enable-gmp \
	            --with-gmp="$(SAGE_LOCAL)" \
	            --enable-NTL \
	            --with-NTL="$(SAGE_LOCAL)" \
	            --without-flint \
	            --with-gmp="$(SAGE_LOCAL)" \
					--with-Singular=yes \
	            $(ENABLE_DEBUGOUTPUT)

# configure libfac a second time
	export CFLAGS="$(CFLAGS)" \
	       CXXFLAGS="$(CXXFLAGS)"; \
	       GREP_OPTIONS=""; \
	cd $(SRC)/libfac; ./configure \
	            --prefix="$(SAGE_LOCAL)" \
	            --exec-prefix="$(SAGE_LOCAL)" \
	            --bindir="$(SAGE_LOCAL)"/bin \
	            --libdir="$(SAGE_LOCAL)"/lib \
	            --with-Singular=yes \
	            $(WITH_DEBUG)

	touch $@

#singular ignores DESTDIR, so here it goes.
S_I=$(SAGE_INSTALL) -D '$(DESTDIR)'
S_I_D=$(SAGE_INSTALL) -D '$(DESTDIR)' -d

MAKEENV = INSTALL="$(S_I)" MKINSTALLDIRS="$(S_I_D)"
MAKEENV+= CXXFLAGS="$(CXXFLAGS)"
MAKEENV+= CFLAGS="$(CFLAGS)"
MAKEENV+= CPPFLAGS="$(CPPFLAGS)"
MAKEENV+= GREP_OPTIONS=""

# FIXME: take from common
MYMAKEFLAGS += INSTALL="$(SAGE_INSTALL_DESTDIR)"
MYMAKEFLAGS += MKINSTALLDIRS="$(SAGE_INSTALLDIRS_DESTDIR)"

# Singular doesn't have separate build and install steps. So we
# directly need to install. The "-nolns" means that we will really
# copy files, not symlink them (for some crazy reason, Singular's
# default is the create symlinks when installing).
install: install-singular install-docs install-env

# BUG: singular will nuke the installation before it is even built!

install-singular: clean-hack build
	export $(MAKEENV); $(MAKE) $(MYMAKEFLAGS) -C$(SRC) install-nolns
	export $(MAKEENV); $(MAKE) $(MYMAKEFLAGS) -C$(SRC) install-libsingular

#install-rest: # former build_factory, build_libfac
	export $(MAKEENV); $(MAKE) $(MYMAKEFLAGS) -C$(SRC)/factory all
	export $(MAKEENV); $(MAKE) $(MYMAKEFLAGS) -C$(SRC)/factory install
	$(S_I) $(SRC)/factory/factoryconf.h "$(SAGE_LOCAL)/include/"
	export $(MAKEENV); $(MAKE) $(MYMAKEFLAGS) -C$(SRC)/libfac all
	export $(MAKEENV); $(MAKE) $(MYMAKEFLAGS) -C$(SRC)/libfac install

	$(S_I) $(SRC)/Singular/singular "$(SAGE_LOCAL)/bin"

install-docs:
	$(S_I) -t $(SAGE_LOCAL)/share/singular/ $(SHARED)/singular.hlp $(SHARED)/singular.idx

install-env: singular.sh
	$(SAGE_INSTALL) -d $(DESTDIR)$(SAGE_ETC)/env.d
	$(SAGE_INSTALL) -t $(DESTDIR)$(SAGE_ETC)/env.d $<
	rm $<

singular.sh:
	echo 'SINGULARPATH="$$SAGE_PREFIX/share/singular"' > $@
	echo 'SINGULAR_EXECUTABLE="$$SAGE_PREFIX/bin/Singular"' >> $@
	echo "export SINGULAR_EXECUTABLE SINGULARPATH" >> $@

build: configure-stamp
	ln -sf Singular $(SRC)/Singular/singular

#create_singular_script()

.PHONY: install-singular install-rest install-docs congigure-rest build install-env
