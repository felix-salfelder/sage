# Main Makefile for Sage.

# The default target ("all") builds Sage and the whole (HTML) documentation.
#
# Target "build" just builds Sage.
#
# See below for targets to build the documentation in other formats,
# to run various types of test suites, and to remove parts of the build etc.
#
SUBDIRS = dist build

# just pkgs?
PKGSDIR=build/pkgs

PIPE = $(abs_top_srcdir)/build/pipestatus
V_ = 0 # $(AM_DEFAULT_VERBOSITY)
V_0 = 0
V_1 = 1

# need absolute path, passed to other build scripts.
SAGE_LOGS=@abs_top_builddir@/pkgs/logs

CORE_MODULES=src/c_lib src/sage src/doc src/bin src/ext # src/mac-app src/whatever
CORE_ENV=LDFLAGS="-L$(prefix)/lib $$LDFLAGS" PATH="$(exec_prefix)/bin:$$PATH"
CORE_OPTS=--prefix="@prefix@"

### CORE_MODULE build implementation ###
# FIXME: treat all modules the same?

$(CORE_MODULES:%=%-configure): %-configure: %-configure-stamp
$(CORE_MODULES:%=%-configure-stamp): %-configure-stamp: $(abs_srcdir)/%/configure
	-mkdir -p $*
	cd $*; $(abs_top_srcdir)/$*/configure $(CORE_OPTS) $(CORE_ENV)
	touch $@

$(CORE_MODULES:%=%-build): %-build: %-build-stamp
$(CORE_MODULES:%=%-build-stamp): %-build-stamp: %-configure-stamp
	export $(CORE_ENV); \
	$(MAKE) -C$* V=$(V_$(V))
	touch $@

$(CORE_MODULES:%=%-install-stamp): %-install-stamp: %-install
	touch $@

$(CORE_MODULES:%=%-install): %-install: %-build-stamp
	$(MAKE) -C$* install

# distribute core modules as tarballs
# (probably unneeded)
EXTRA_DIST=$(CORE_MODULES:%=%-builtin.tar.gz)
$(CORE_MODULES:%=%-builtin.tar.gz): %-builtin.tar.gz: %-configure-stamp
	$(MAKE) -C$* dist PACKAGE=internal VERSION=builtin
	mv $*/internal-builtin.tar.gz $*-builtin.tar.gz

# add submodule contents to dist (much better)
@distdir_subs@

### core module rules ###
# FIXME: build src/sage out of tree
# in src/build/sage/cythonized?!

.PHONY: $(CORE_MODULES:%=%-configure) \
        $(CORE_MODULES:%=%-build) \
        $(CORE_MODULES:%=%-install)

### core module dependencies ###

src/doc-configure-stamp: # src/sage-install-stamp
src/sage-configure-stamp: # src/c_lib-build-stamp

PYTHON ?= $(abs_top_builddir)/local/bin/python

src/sage-configure-stamp: CORE_ENV+= CPPFLAGS="-I$(abs_builddir)/local/include -I$(abs_builddir)/src/c_lib/include $$CPPFLAGS"
src/sage-configure-stamp: CORE_ENV+= PYTHON="$(PYTHON)"
src/sage-configure-stamp: CORE_ENV+= PKG_CONFIG_LIBDIR="$(abs_top_builddir)/local/lib/pkgconfig"
src/sage-configure-stamp: CORE_ENV+= LD_LIBRARY_PATH="$(abs_builddir)/local/lib:$$LD_LIBRARY_PATH"

src/c_lib-configure-stamp: CORE_ENV+= CPPFLAGS="-I$(abs_builddir)/local/include -I$(abs_builddir)/src/c_lib/include $$CPPFLAGS"
src/c_lib-configure-stamp: CORE_ENV+= PYTHON="$(PYTHON)"
src/c_lib-configure-stamp: CORE_ENV+= PKG_CONFIG_LIBDIR="$(abs_top_builddir)/local/lib/pkgconfig"
src/c_lib-configure-stamp: CORE_ENV+= LD_LIBRARY_PATH="$(abs_builddir)/local/lib:$$LD_LIBRARY_PATH"

src/bin-configure-stamp: CORE_OPTS+= --sysconfdir=@prefix@/etc

# --path-paranoia?
@SAGE_ONLY_TRUE@src/bin-configure-stamp: CORE_OPTS+= --enable-path_redundancy

src/sage-build-stamp: CORE_ENV+= LD_LIBRARY_PATH="$(abs_builddir)/local/lib:$$LD_LIBRARY_PATH"

#c_lib depends from deps.in
src/c_lib-configure-stamp: @DEP_mpir@ @DEP_ntl@ @DEP_pari@ @DEP_polybori@ \
                           @DEP_pynac@ @DEP_python@

BIN=src/bin-install-stamp
CSAGE=src/c_lib-install-stamp
SAGE=src/sage-install-stamp

sage-stuff: $(SAGE)

## install the core library parts
core-install: $(CORE_MODULES:%=%-install)

## foreign module stuff

# this is the install-stamp location
INST = local/var/lib/sage/installed

LOCKFILE=$(abs_builddir)/.dllock

packagename = $(firstword $(subst -, ,$1))
unat = echo "$1"; $1

define downloadit
	@set -C; \
	trap 'rm -f $(LOCKFILE); exit $?' INT TERM EXIT;\
	until 2> /dev/null > $(LOCKFILE); do :; done
	mkdir -p @UPSTREAM@; cd @UPSTREAM@;\
	$(call unat,@URL_GRABBER@ @DOWNLOAD_URL@/$(call packagename,$*)/$(notdir $@))
endef

@UPSTREAM@/%.bz2:
	$(downloadit)

@UPSTREAM@/%.gz:
	$(downloadit)

@dotPRECIOUS@: @UPSTREAM@/%.bz2 @UPSTREAM@/%.gz

# FIXME: decruft environment!!!1
# this apparently is *not* prefix
SAGE_LOCAL=@abs_top_builddir@/local

### generic build stamp rule
# FIXME: use more env.sh
# FIXME: pass FILELIST
# FIXME: PYTHONPATH must not be here
# FIXME: SINGULARPATH must not be here
# (source local/etc/env.d/*.sh from dist?)
#$(INST)/%: $(PKGSDIR)/$$(firstword $$(subst -, ,$$*))/src-$$(lastword $$(subst -, ,$$*)) | $(SAGE_LOGS) $(INST) $(PKGSDIR)
.SECONDEXPANSION:
$(INST)/%: $(PKGSDIR)/% | $(SAGE_LOGS) $(INST) $(PKGSDIR)
	path=$(PKGSDIR)/$(firstword $(subst -, ,$*)); \
	[ -d $$path/patches -o -h $$path/patches ] || $(LN_S) $(abs_top_srcdir)/$$path/patches $$path;\
	export CC="@CC@" CFLAGS="@CFLAGS@" \
	       MAKE=$(MAKE) UNAME="@UNAME@" \
	       srcdir="$(abs_top_srcdir)/$$path" \
	       PYTHONHOME="$(abs_builddir)/local" \
	       PYTHONPATH="$(abs_builddir)/$$path" \
	       SINGULARPATH="$(SAGE_LOCAL)/share/singular" \
	       SINGULAR_EXECUTABLE="$(SAGE_LOCAL)/bin/Singular"; \
	source dist/etc/env.sh; \
	cd $$path; \
	rm -rf src; \
	$(LN_S) ../$* src || exit 1; \
	echo "$(abs_top_srcdir)/$$path/spkg-install" ;\
	$(PIPE) "$(abs_top_srcdir)/$$path/spkg-install" 'tee -a $(SAGE_LOGS)/$*.log'
	touch $@

.SECONDEXPANSION:
$(INSTALL_FP_NAMES:%=%-info): %-info: build/pkgs/%/package-version.txt
	@echo "selected:  $*-$$(cat $<)"
	@inst=$$( ls $(INST)/$*-* ); \
		[ -f $$inst ] && echo installed: $$( basename $$inst )

	@unp=$$( ls -d $(PKGSDIR)/$*/src-* 2>/dev/null ); \
		[ -n "$$unp" ] && echo -n unpacked: ; \
	    for i in $$unp; do echo -n " "$$( basename $$i ); done;\
		 echo

# convenience rules
#incomplete/under construction (necessary?)
DISABLED$(INSTALL_FP_NAMES:%=%-configure): %-configure: build/pkgs/%/src
	path=build/pkgs/$*;\
	export SAGE_LOCAL="$(abs_builddir)/local" CC="@CC@" CFLAGS="@CFLAGS@" \
	       MAKE=$(MAKE) UNAME="@UNAME@" PATH=$(abs_builddir)/local/bin:$$PATH \
	       LD_LIBRARY_PATH="$(abs_builddir)/local/lib:$$LD_LIBRARY_PATH" \
	       srcdir="$(abs_top_srcdir)/$$path"; \
	       PYTHONHOME="$(abs_builddir)/local"; \
	$(MAKE) -f$(abs_top_srcdir)/build/pkgs/$*/spkg-install -Cbuild/pkgs/$* configure



p=%
define unpack
	@echo unpacking $@
# hmm, call clean?
	rm -rf $(PKGSDIR)/$*/src $(PKGSDIR)/$*/*-stamp
	mkdir -p $(PKGSDIR)/$*
	cd $(PKGSDIR)/$*; @TAR@ -xf $(abs_top_builddir)/$|
	@a="$(FP_$*)"; shopt -s extglob; \
	  $(call unat,mv $(PKGSDIR)/$*/$${a%.p[0-9]?([0-9])} $@)
endef

define unpackwithversion
	mkdir -p $(PKGSDIR)/$*
	@echo unpacking $@
	cd $(PKGSDIR)/$*; @TAR@ --strip-components=1 -xf $(abs_top_builddir)/$|
endef

.SECONDEXPANSION:
$(PKGSDIR)/%/src: | @UPSTREAM@/$$(shell a=$$(FP_$$*) && shopt -s extglob && echo "$$$${a$$(p).p[0-9]?([0-9])}" ).tar.bz2 \
                  $$(shell echo >&2 $$* to2 $$(FP_$$*))
	$(unpack)

# hmm, for now. better wihout stamp (?)
# actually need $(PKGSDIR)/<pkgname>/src-<versionno>
.SECONDEXPANSION:
$(PKGSDIR)/%: | @UPSTREAM@/$$(shell a=$$* && shopt -s extglob && echo "$$$${a$$(p).p[0-9]?([0-9])}" ).tar.bz2
	$(unpackwithversion)

.SECONDEXPANSION:
$(PKGSDIR)/%/src: | @UPSTREAM@/$$(shell a=$$(FP_$$*) && shopt -s extglob && echo "$$$$a" ).tar.gz \
                  $$(shell echo >&2 $$* to3 $$(FP_$$*))
	$(unpack)

$(INST):
	mkdir -p $@

$(INST)/:
	mkdir -p $@

$(SAGE_LOGS):
	mkdir -p $@

logs:
	mkdir -p $@

build: logs

$(PKGSDIR):
	mkdir -p $@

build:
	cd build && \
	"../$(PIPE)" \
		"env SAGE_PARALLEL_SPKG_BUILD='$(SAGE_PARALLEL_SPKG_BUILD)' ./install all 2>&1" \
		"tee -a ../logs/install.log"
	./sage -b

# ssl: build Sage, and also install pyOpenSSL. This is necessary for
# running the secure notebook. This make target requires internet
# access. Note that this requires that your system have OpenSSL
# libraries and headers installed. See README.txt for more
# information.
# FIXME: move to configure.ac
ssl: all
	./sage -i pyopenssl

build-serial: SAGE_PARALLEL_SPKG_BUILD = no
build-serial: build

# Start Sage if the file local/etc/sage-started.txt does not exist
# (i.e. when we just installed Sage for the first time).
start: build
	[ -f local/etc/sage-started.txt ] || local/bin/sage-starts

# You can choose to have the built HTML version of the documentation link to
# the PDF version. To do so, you need to build both the HTML and PDF versions.
# To have the HTML version link to the PDF version, do
#
# $ ./sage --docbuild all html
# $ ./sage --docbuild all pdf
#
# For more information on the docbuild utility, do
#
# $ ./sage --docbuild -H
doc: doc-html

doc-html: build
	$(PIPE) "./sage --docbuild --no-pdf-links all html $(SAGE_DOCBUILD_OPTS) 2>&1" "tee -a logs/dochtml.log"

doc-html-mathjax: build
	$(PIPE) "./sage --docbuild --no-pdf-links all html -j $(SAGE_DOCBUILD_OPTS) 2>&1" "tee -a logs/dochtml.log"

# Keep target 'doc-html-jsmath' for backwards compatibility.
doc-html-jsmath: doc-html-mathjax

doc-pdf: build
	$(PIPE) "./sage --docbuild all pdf $(SAGE_DOCBUILD_OPTS) 2>&1" "tee -a logs/docpdf.log"

doc-clean:
	@echo "Deleting generated docs..."
	make -Csrc/doc clean

clean-local:
	@echo "Deleting package build directories..."
	rm -rf local/var/tmp/sage/build

	make -C src/c_lib clean
	make -C src/sage clean
# FIXME:
# also remove foreign package src

bdist-clean: clean
	@echo "Deleting miscellaneous artifacts generated by build system ..."
	rm -rf logs
	rm -rf distFIXME
	rm -rf tmp
	rm -f build/Makefile
	rm -f .BUILDSTART

distclean-local:
	-for i in $(CORE_MODULES); do \
	  [ -f $$i/config.status ] && $(MAKE) -C $$i distclean; \
	done
	@echo "Deleting all remaining output from build system ..."
	rm -rf $(top_builddir)/local

micro_release: bdist-clean lib-clean
	@echo "Stripping binaries ..."
	find local/lib local/bin -type f -exec strip '{}' ';' |& grep -v "File format not recognized" |  grep -v "File truncated" || true

TESTPRELIMS = local/bin/sage-starts
TESTALL = ./sage -t --all
PTESTALL = ./sage -t -p --all

test: all # i.e. build and doc
	$(TESTPRELIMS)
	$(TESTALL) --logfile=logs/test.log

check: test

testall: all # i.e. build and doc
	$(TESTPRELIMS)
	$(TESTALL) --optional=all --logfile=logs/testall.log

testlong: all # i.e. build and doc
	$(TESTPRELIMS)
	$(TESTALL) --long --logfile=logs/testlong.log

testalllong: all # i.e. build and doc
	$(TESTPRELIMS)
	$(TESTALL) --long --optional=all --logfile=logs/testalllong.log

ptest: all # i.e. build and doc
	$(TESTPRELIMS)
	$(PTESTALL) --logfile=logs/ptest.log

ptestall: all # i.e. build and doc
	$(TESTPRELIMS)
	$(PTESTALL) --optional=all --logfile=logs/ptestall.log

ptestlong: all # i.e. build and doc
	$(TESTPRELIMS)
	$(PTESTALL) --long --logfile=logs/ptestlong.log

ptestalllong: all # i.e. build and doc
	$(TESTPRELIMS)
	$(PTESTALL) --long --optional=all --logfile=logs/ptestalllong.log


testoptional: testall # just an alias

testoptionallong: testalllong # just an alias

ptestoptional: ptestall # just an alias

ptestoptionallong: ptestalllong # just an alias

# this is pretty much 'incomplete'.
install-broken:
	echo "Experimental use only!"
	if [ "$(DESTDIR)" = "" ]; then \
		echo >&2 "Set the environment variable DESTDIR to the install path."; \
		exit 1; \
	fi
# Make sure we remove only an existing directory. If $(DESTDIR)/sage is
# a file instead of a directory then the mkdir statement later will fail
	if [ -d "$(DESTDIR)"/sage ]; then \
		rm -rf "$(DESTDIR)"/sage; \
	fi
	mkdir -p "$(DESTDIR)"/sage
	mkdir -p "$(DESTDIR)"/bin
	cp -Rp * "$(DESTDIR)"/sage
	rm -f "$(DESTDIR)"/bin/sage
	$(LN_S) -s ../sage/sage "$(DESTDIR)"/bin/sage
	"$(DESTDIR)"/bin/sage -c # Run sage-location

.PHONY: all build build-serial start install \
	doc doc-html doc-html-jsmath doc-html-mathjax doc-pdf \
	doc-clean clean lib-clean bdist-clean distclean micro_release \
	test check testoptional testall testlong testoptionallong testallong \
	PTESt ptestoptional ptestall ptestlong ptestoptionallong ptestallong

@dotPRECIOUS@: local/var/lib/sage/installed/%

# don't delete intermediate files (e.g. stamps)
.SECONDARY:

include deps.in

uninstall-local:
	rm -rf src/*-stamp
