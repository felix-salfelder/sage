###############################################################################
# This file (deps.in) is included by the toplevel makefile template
###############################################################################
#
# FIXME: move package dependencies to packages
#

# compilation/install output will be teed to here

# Let e.g. SAGE_ROOT/spkg/install pass options to sage-spkg, i.e. currently
# "-f", to force rebuilding dependent packages during an upgrade (#9896).
#
# When upgrading from a 4.x version of Sage, the script "sage-spkg" will be
# found in SAGE_ROOT/local/bin until the new sage_root repo is installed.
# After that, it will be found in SAGE_ROOT/spkg/bin
# (SAGE_ROOT/spkg/bin is added to the PATH in spkg/install).
# Therefore, do not put an explicit path for sage-spkg here.
SAGE_SPKG = sage-spkg $${SAGE_SPKG_OPTS}

# Tell make not to look for files with these names:
.PHONY: all all-sage base toolchain toolchain-deps

# Make the 4 build phases: base, toolchain, toolchain-deps, all-sage
# During the toolchain build, we export SAGE_BUILD_TOOLCHAIN=yes
# such that packages can do different things when they are built
# as prerequisite of GCC.
all-old:
	$(MAKE) base
	env SAGE_BUILD_TOOLCHAIN=yes $(MAKE) toolchain
	$(MAKE) toolchain-deps
	$(MAKE) all-sage

# Base packages
# FP_prereq = $(call newest_version_base,prereq)

# Usage: newest_version_base $pkg
# Print version number of latest (according to modification time)
# base package $pkg
# As a fallback, we also look at the latest installed package.
define newest_version_base
$(shell \
    PKG="$(1)";\
    for FILE in `{ ls -1t @abs_top_srcdir@/build/base/$$PKG-*-install; ls -1t installed/$$PKG-*; } 2>/dev/null`;\
    do\
        ANS=`echo "$$FILE" | sed 's|.*/||; s|-install||'`;\
        if test -n "$$ANS"; then\
            echo "$$ANS";\
            exit 0;\
        fi;\
    done;\
    echo >&2 "Cannot determine latest version of $$PKG.";\
    echo "$$PKG"; )
endef

# Usage: newest_version $pkg
# Print version number of latest standard package $pkg
define newest_version
$(shell \
    PKG="$(1)";\
    if [ -f "@abs_top_srcdir@/build/pkgs/$$PKG/package-version.txt" ]; then\
        echo -n $$PKG-;\
        cat "@abs_top_srcdir@/build/pkgs/$$PKG/package-version.txt";\
    else\
        echo >&2 "Cannot determine latest version of $$PKG.";\
        echo -n "$$PKG-unknown";\
    fi;)
endef

# Standard foreign packages
# FIXME: autogenerate
FP_atlas=$(call newest_version,atlas)
FP_blas=$(call newest_version,blas)
FP_boehm_gc=$(call newest_version,boehm_gc)
FP_boost_cropped=$(call newest_version,boost_cropped)
FP_bzip2=$(call newest_version,bzip2)
FP_cddlib=$(call newest_version,cddlib)
FP_cephes=$(call newest_version,cephes)
FP_cliquer=$(call newest_version,cliquer)
FP_conway_polynomials=$(call newest_version,conway_polynomials)
FP_cvxopt=$(call newest_version,cvxopt)
FP_cython=$(call newest_version,cython)
FP_docutils=$(call newest_version,docutils)
FP_ecl=$(call newest_version,ecl)
FP_eclib=$(call newest_version,eclib)
FP_ecm=$(call newest_version,ecm)
FP_elliptic_curves=$(call newest_version,elliptic_curves)
FP_fflas_ffpack=$(call newest_version,fflas_ffpack)
FP_flint=$(call newest_version,flint)
FP_flintqs=$(call newest_version,flintqs)
FP_libfplll=$(call newest_version,libfplll)
FP_freetype=$(call newest_version,freetype)
FP_gap=$(call newest_version,gap)
FP_gcc=$(call newest_version,gcc)
FP_gd=$(call newest_version,gd)
FP_gdmodule=$(call newest_version,gdmodule)
FP_genus2reduction=$(call newest_version,genus2reduction)
FP_gfan=$(call newest_version,gfan)
# FP_git=$(call newest_version,git)
FP_givaro=$(call newest_version,givaro)
FP_glpk=$(call newest_version,glpk)
FP_graphs=$(call newest_version,graphs)
FP_gf2x=$(call newest_version,gf2x)
FP_gsl=$(call newest_version,gsl)
FP_iconv=$(call newest_version,iconv)
FP_iml=$(call newest_version,iml)
FP_ipython=$(call newest_version,ipython)
FP_jinja2=$(call newest_version,jinja2)
FP_jmol=$(call newest_version,jmol)
FP_lapack=$(call newest_version,lapack)
FP_lcalc=$(call newest_version,lcalc)
FP_lrcalc=$(call newest_version,lrcalc)
FP_libgap=$(call newest_version,libgap)
FP_libpng=$(call newest_version,libpng)
FP_linbox=$(call newest_version,linbox)
FP_libm4ri=$(call newest_version,libm4ri)
FP_libm4rie=$(call newest_version,libm4rie)
FP_matplotlib=$(call newest_version,matplotlib)
FP_maxima=$(call newest_version,maxima)
FP_mpc=$(call newest_version,mpc)
FP_mpfi=$(call newest_version,mpfi)
FP_mpfr=$(call newest_version,mpfr)
FP_mpir=$(call newest_version,mpir)
FP_mpmath=$(call newest_version,mpmath)
FP_networkx=$(call newest_version,networkx)
FP_ntl=$(call newest_version,ntl)
FP_numpy=$(call newest_version,numpy)
FP_palp=$(call newest_version,palp)
FP_pari=$(call newest_version,pari)
FP_patch=$(call newest_version,patch)
FP_pexpect=$(call newest_version,pexpect)
FP_pil=$(call newest_version,pil)
FP_polybori=$(call newest_version,polybori)
FP_polytopes_db=$(call newest_version,polytopes_db)
FP_ppl=$(call newest_version,ppl)
FP_pycrypto=$(call newest_version,pycrypto)
FP_pygments=$(call newest_version,pygments)
FP_pynac=$(call newest_version,pynac)
FP_python=$(call newest_version,python)
FP_r=$(call newest_version,r)
FP_rpy2=$(call newest_version,rpy2)
FP_ratpoints=$(call newest_version,ratpoints)
FP_readline=$(call newest_version,readline)
FP_rubiks=$(call newest_version,rubiks)
FP_sagenb=$(call newest_version,sagenb)
FP_sagetex=$(call newest_version,sagetex)
FP_scipy=$(call newest_version,scipy)
FP_scons=$(call newest_version,scons)
FP_setuptools=$(call newest_version,setuptools)
FP_singular=$(call newest_version,singular)
FP_sphinx=$(call newest_version,sphinx)
FP_sqlalchemy=$(call newest_version,sqlalchemy)
FP_sqlite=$(call newest_version,sqlite)
FP_symmetrica=$(call newest_version,symmetrica)
FP_sympow=$(call newest_version,sympow)
FP_sympy=$(call newest_version,sympy)
FP_tachyon=$(call newest_version,tachyon)
FP_termcap=$(call newest_version,termcap)
FP_zlib=$(call newest_version,zlib)
FP_zn_poly=$(call newest_version,zn_poly)

# All targets except for the base packages
# ... generate from configure.ac.
INSTALL_FP_NAMES = \
     atlas \
     blas \
     boehm_gc \
     boost_cropped \
     cddlib \
     cephes \
     cliquer \
     conway_polynomials \
     cvxopt \
     cython \
     docutils \
     ecl \
     eclib \
     ecm \
     elliptic_curves \
     fflas_ffpack \
     flint \
     flintqs \
     gf2x \
     libfplll \
     freetype \
     genus2reduction \
     gap \
     gd \
     gdmodule \
     gfan \
     givaro \
     git \
     glpk \
     graphs \
     gsl \
     iconv \
     iml \
     ipython \
     jinja2 \
     jmol \
     lapack \
     lcalc \
     lrcalc \
     libgap \
     libpng \
     linbox \
     libm4ri \
     libm4rie \
     matplotlib \
     maxima \
     mpc \
     mpfi \
     mpfr \
     mpir \
     mpmath \
     networkx \
     ntl \
     numpy \
     palp \
     pari \
     pexpect \
     pil \
     polybori \
     polytopes_db \
     ppl \
     pycrypto \
     pygments \
     pynac \
     python \
     ratpoints \
     r \
     rpy2 \
     readline \
     rubiks \
     sagenb \
     sagetex \
     scipy \
     scons \
     setuptools \
     singular \
     sphinx \
     sqlalchemy \
     sqlite \
     symmetrica \
     sympow \
     sympy \
     tachyon \
     termcap \
     zlib \
     znpoly

#doesnt work!
# INSTALL_FP_STAMPS=$(INST)/$(INSTALL_FP_NAMES:%=$$(FP_%))

scripts: $(BIN)

all-local: $(INSTALL_FP_NAMES:%=%-install) \
     $(BIN) \
     $(SAGE) \
     $(CSAGE) \
     $(EXTCODE)

EXTCODE = src/ext-install-stamp

# TOOLCHAIN consists of dependencies determined by spkg/install,
# including for example the GCC package.
toolchain: $(TOOLCHAIN)

# Build all packages that GCC links against serially, otherwise this
# leads to race conditions where some library which is used by GCC gets
# reinstalled. Since system GCCs might use Sage's libraries, we do this
# unconditionally. We still use the dependency checking from $(MAKE),
# so this will not trigger useless rebuilds.
# See http://trac.sagemath.org/sage_trac/ticket/14168
# FIXME, serial rule!
toolchain-deps:
	test -n @DEP_zlib@ && $(MAKE) @DEP_zlib@
	test -n @DEP_mpir@ && $(MAKE) @DEP_mpir@
	test -n @DEP_mpfr@ && $(MAKE) @DEP_mpfr@
	test -n @DEP_mpc@ && $(MAKE) @DEP_mpc@

# Everything needed to start up Sage using "./sage".  Of course, not
# every part of Sage will work.  It does not include Maxima for example.
SAGERUNTIME = $(SCRIPTS) sage @DEP_sagenb@ @DEP_ipython@ @DEP_gap@

###############################################################################
# Building the base system
#
# This consists of packages which are required for the Sage build system
# but not for Sage itself.  Since nothing explicitly depends on these,
# an update of these packages will not trigger a rebuild of every other
# package during an upgrade, see #13415.
###############################################################################
base: @DEP_bzip2@ @DEP_patch@

# If we are upgrading from a version 4.x of Sage, don't build bzip2.
# This is because the old sage-spkg script cannot install the new bzip2
# spkg (which is gzip compressed).  We continue using the old bzip2
# installation (which is version 1.0.5 since sage-3.3), which is fine.
$(INST)/$(FP_bzip2):

$(INST)/$(FP_patch): @DEP_bzip2@

###############################################################################
# Building normal packages
###############################################################################
$(INST)/$(FP_atlas): @DEP_lapack@ @DEP_python@

$(INST)/$(FP_readline): @DEP_termcap@

$(INST)/$(FP_docutils): @DEP_python@

$(INST)/$(FP_elliptic_curves): @DEP_python@ @DEP_sqlite@

# CONWAY depends on SAGERUNTIME because it runs Sage code to
# generate a Sage object (.sobj).
$(INST)/$(FP_conway_polynomials): $(SAGERUNTIME)

$(INST)/$(FP_glpk): @DEP_mpir@ @DEP_zlib@

# Python links against -lbz2.  Technically speaking, we should add
# BZIP2 as dependency here.  But we don't do that to avoid needless
# recompiles of Python when upgrading.  Since bzip2 is part of the
# "base" target, we are guaranteed anyway that some version of bzip2
# is present.
$(INST)/$(FP_python): @DEP_zlib@ @DEP_readline@ @DEP_sqlite@ @DEP_libpng@

$(INST)/$(FP_mpir): @DEP_iconv@

$(INST)/$(FP_gsl): @DEP_atlas@

$(INST)/$(FP_ntl): @DEP_mpir@ @DEP_gf2x@

$(INST)/$(FP_libfplll): @DEP_mpir@ @DEP_mpfr@

$(INST)/$(FP_pari): @DEP_readline@ @DEP_mpir@

$(INST)/$(FP_polybori): @DEP_python@ @DEP_ipython@ @DEP_scons@ @DEP_boost_cropped@ \
                   @DEP_libm4ri@ @DEP_gd@

$(INST)/$(FP_polytopes_db):

$(INST)/$(FP_ppl): @DEP_mpir@

$(INST)/$(FP_mpc): @DEP_mpir@ @DEP_mpfr@

$(INST)/$(FP_mpfr): @DEP_mpir@

$(INST)/$(FP_mpfi): @DEP_mpir@ @DEP_mpfr@

$(INST)/$(FP_givaro): @DEP_mpir@

# $(INST)/$(FP_git): @DEP_zlib@ @DEP_python@

$(INST)/$(FP_fflas_ffpack): @DEP_mpir@ @DEP_givaro@ @DEP_gsl@ @DEP_atlas@

$(INST)/$(FP_linbox): @DEP_mpir@ @DEP_ntl@ @DEP_givaro@ \
                      @DEP_mpfr@ @DEP_libfplll@ @DEP_iml@ \
                      @DEP_libm4ri@ @DEP_libm4rie@ @DEP_fflas_ffpack@

$(INST)/$(FP_iml): @DEP_mpir@ @DEP_gsl@ @DEP_atlas@

$(INST)/$(FP_eclib): @DEP_mpir@ @DEP_pari@ @DEP_ntl@

$(INST)/$(FP_genus2reduction): @DEP_pari@

$(INST)/$(FP_lcalc): @DEP_pari@ @DEP_mpfr@

$(INST)/$(FP_pynac): @DEP_python@

$(INST)/$(FP_gap): @DEP_termcap@ @DEP_readline@ @DEP_mpir@

$(INST)/$(FP_libgap): @DEP_gap@

$(INST)/$(FP_ipython): @DEP_python@

$(INST)/$(FP_pexpect): @DEP_python@

$(INST)/$(FP_gd): @DEP_libpng@ @DEP_freetype@ @DEP_iconv@

$(INST)/$(FP_gdmodule): @DEP_python@ @DEP_gd@ @DEP_iconv@

$(INST)/$(FP_scons): @DEP_python@

$(INST)/$(FP_rubiks):

$(INST)/$(FP_sqlite): @DEP_readline@

# To build SageTeX, you just need Python, but to test (SAGE_CHECK=yes)
# SageTeX, you actually need to run sage, produce plots,...
$(INST)/$(FP_sagetex): @DEP_python@ $(SAGERUNTIME) @DEP_maxima@ @DEP_scipy@ \
                       @DEP_matplotlib@ @DEP_pil@ @DEP_tachyon@

$(INST)/$(FP_setuptools): @DEP_python@

$(INST)/$(FP_singular): @DEP_mpir@ @DEP_ntl@ @DEP_readline@ @DEP_mpfr@

$(INST)/$(FP_pycrypto): @DEP_python@

$(INST)/$(FP_networkx): @DEP_python@

$(INST)/$(FP_mpmath): @DEP_python@

$(INST)/$(FP_jmol): @DEP_sagenb@

$(INST)/$(FP_libpng): @DEP_zlib@

$(INST)/$(FP_matplotlib): \
    @DEP_python@ @DEP_numpy@ @DEP_freetype@ @DEP_libpng@ \
    @DEP_gdmodule@

$(INST)/$(FP_cddlib): @DEP_mpir@

$(INST)/$(FP_gfan): @DEP_mpir@ @DEP_cddlib@

$(INST)/$(FP_tachyon): @DEP_libpng@

$(INST)/$(FP_ecm): @DEP_mpir@

$(INST)/$(FP_ratpoints): @DEP_mpir@

$(INST)/$(FP_ecl): @DEP_mpir@ @DEP_readline@ @DEP_boehm_gc@

$(INST)/$(FP_maxima): @DEP_ecl@

$(INST)/$(FP_r): @DEP_atlas@ @DEP_iconv@ @DEP_readline@

$(INST)/$(FP_rpy2): @DEP_python@ @DEP_r@

$(INST)/$(FP_sympy): @DEP_python@

$(INST)/$(FP_cython): @DEP_python@

$(INST)/$(FP_flintqs): @DEP_mpir@

$(INST)/$(FP_flint): @DEP_mpir@ @DEP_mpfr@ @DEP_ntl@

$(INST)/$(FP_libm4ri): @DEP_libpng@

$(INST)/$(FP_libm4rie): @DEP_libm4ri@ @DEP_givaro@ @DEP_ntl@

# zn_poly really does depend on Python, despite this is far from obvious.
# The 'configure' script in zn_poly calls Python to make a 'makefile'.
$(INST)/$(FP_zn_poly): @DEP_mpir@ @DEP_python@

$(INST)/$(FP_sagenb): @DEP_python@ @DEP_setuptools@ @DEP_pexpect@ \
                      @DEP_jinja2@ @DEP_sphinx@ @DEP_docutils@

$(INST)/$(FP_sqlalchemy): @DEP_python@ @DEP_setuptools@

$(INST)/$(FP_sphinx): @DEP_python@ @DEP_setuptools@ @DEP_docutils@ \
                      @DEP_jinja2@ @DEP_pygments@

$(INST)/$(FP_jinja2): @DEP_python@ @DEP_setuptools@ @DEP_docutils@

$(INST)/$(FP_pygments): @DEP_python@ @DEP_setuptools@

# List all *build-time* dependencies of the Sage library.  These are,
# on the one hand, programs needed for the build/install process of the
# Sage library (e.g. JINJA2), and on the
# other hand all dependencies for Cython files (e.g. PARI, NTL, MPIR).
src/sage-configure-stamp: $(CSAGE)

src/c_lib-configure-stamp: \
    @DEP_atlas@ \
    @DEP_cephes@ \
    @DEP_cliquer@ \
    @DEP_cython@ \
    @DEP_ecl@ \
    @DEP_eclib@ \
    @DEP_ecm@ \
    @DEP_flint@ \
    @DEP_libfplll@ \
    @DEP_gd@ \
    @DEP_givaro@ \
    @DEP_glpk@ \
    @DEP_gsl@ \
    @DEP_iml@ \
    @DEP_jinja2@ \
    @DEP_lcalc@ \
    @DEP_libgap@ \
    @DEP_libpng@ \
    @DEP_linbox@ \
    @DEP_libm4ri@ \
    @DEP_libm4rie@ \
    @DEP_mpc@ \
    @DEP_mpfi@ \
    @DEP_mpfr@ \
    @DEP_mpir@ \
    @DEP_ntl@ \
    @DEP_numpy@ \
    @DEP_pari@ \
    @DEP_polybori@ \
    @DEP_ppl@ \
    @DEP_pynac@ \
    @DEP_python@ \
    @DEP_ratpoints@ \
    @DEP_readline@ \
    @DEP_singular@ \
    @DEP_symmetrica@ \
    @DEP_znpoly@

extcode: $(EXTCODE_TARGETS)

# lib_c
$(CSAGE): @DEP_scons@ @DEP_mpir@ @DEP_ntl@ @DEP_pari@ @DEP_polybori@ @DEP_pynac@ \
          @DEP_python@

$(INST)/ccache: $(BASE) @DEP_zlib)
	+$(PIPE) "$(SAGE_SPKG) ccache 2>&1" "tee -a $(SAGE_LOGS)/ccache.log"
	touch $(INST)/ccache

$(INST)/$(FP_gcc): @DEP_mpir@ @DEP_mpfr@ @DEP_mpc@ @DEP_zlib@

$(INST)/$(FP_pil): @DEP_python@

$(INST)/$(FP_numpy): @DEP_python@ @DEP_lapack@ @DEP_blas@ @DEP_atlas@

$(INST)/$(FP_scipy): @DEP_lapack@ @DEP_blas@ @DEP_numpy@

# matplotlib is needed to test cvxopt (i.e., if SAGE_CHECK=yes). See #12742.
@SAGE_CHECK_TRUE@$(INST)/$(FP_cvxopt): @DEP_matplotlib@

$(INST)/$(FP_cvxopt): \
    @DEP_lapack@ @DEP_blas@ @DEP_numpy@ \
    @DEP_atlas@ @DEP_cephes@ @DEP_gsl@ \
    @DEP_glpk@

$(INST)/$(FP_cephes):

###############################################################################

# setuptools forgets to update easy-install.pth during parallel
# builds, so we build the relevant packages serially.

$(INST)/$(FP_pygments): @DEP_sqlalchemy@
$(INST)/$(FP_jinja2): @DEP_pygments@
$(INST)/$(FP_sphinx): @DEP_jinja2@
$(INST)/$(FP_sagenb): @DEP_sphinx@

# direct phony targets: (FIXME: not phony yet)
.SECONDEXPANSION:
$(INSTALL_FP_NAMES:%=%-install): %-install: $(INST)/$$(FP_$$*)

$(INSTALL_FP_NAMES:%=%-uninstall): %-uninstall:
	@echo not implemented

# just remove it...
$(INSTALL_FP_NAMES:%=%-clean): %-clean:
	rm -rf build/pkgs/$*/src-*
	rm -rf build/pkgs/$*/*-stamp

debugcheck:
	echo $(FP_ntl) $(DEP_libm4rie)
	echo @DEP_ntl@ @DEP_libm4rie@
	echo $(INST)
